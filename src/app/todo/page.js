// "use client"

// import { useEffect, useState } from "react";

// export default function TODO() {

//     const [count, setCount]= useState(0);
//     console.log("re-render");

//     const addCount=function (){
//         setCount(count+1);
//         console.log("ÊàëË¢´Èªû‰∫Ü!");

//     }

//     useEffect(()=>{
//         console.log("CountÊîπËÆä:" + count);
//         return ()=>{
//             console.log("un-mounted")
//         }
//     }, [count]);

//     return(
//         <div>
//             <div>TODO</div>
//             <div onClick={addCount}> ÈªûÊìäÊ¨°Êï∏:{count} </div>
//         </div>

//     );
// }

'use client';

import { useState } from 'react';

// ÂãïÁâ©È°èÊñáÂ≠óÂàóË°®
const animalEmojis = [
  'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ',
  'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶', 'üê§', 'ü¶Ü',
  'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã',
  'üêå', 'üêû', 'üêú', 'ü¶ó', 'üï∑Ô∏è', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ',
  'ü¶ï', 'üêô', 'ü¶ë', 'ü¶ê', 'ü¶û', 'ü¶Ä', 'üê°', 'üê†', 'üêü', 'üê¨',
  'üê≥', 'üêã', 'ü¶à', 'üêä', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß', 'ü¶£',
  'üêò', 'ü¶õ', 'ü¶è', 'üê™', 'üê´', 'ü¶í', 'ü¶ò', 'ü¶¨', 'üêÉ', 'üêÇ',
  'üêÑ', 'üêé', 'üêñ', 'üêè', 'üêë', 'ü¶ô', 'üêê', 'ü¶å', 'üêï', 'üê©',
  'ü¶Æ', 'üêï‚Äçü¶∫', 'üêà', 'üêà‚Äç‚¨õ', 'ü™∂', 'ü¶É', 'ü¶§', 'ü¶ö', 'ü¶ú', 'ü¶¢',
  'ü¶©', 'üïäÔ∏è', 'üêá', 'ü¶ù', 'ü¶®', 'ü¶°', 'ü¶´', 'ü¶¶', 'ü¶•', 'üêÅ',
  'üêÄ', 'üêøÔ∏è', 'ü¶î'
];

export default function TodoList() {
  const [todos, setTodos] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [editingId, setEditingId] = useState(null);
  const [editValue, setEditValue] = useState('');

  // Áç≤ÂèñÈö®Ê©üÂãïÁâ©È°èÊñáÂ≠ó
  const getRandomAnimalEmoji = () => {
    const randomIndex = Math.floor(Math.random() * animalEmojis.length);
    return animalEmojis[randomIndex];
  };

  // ÂâµÂª∫Êñ∞ÁöÑÂæÖËæ¶‰∫ãÈ†Ö
  const handleAddTodo = () => {
    if (inputValue.trim()) {
      const newTodo = {
        id: Date.now(),
        text: inputValue,
        emoji: getRandomAnimalEmoji(),
        completed: false
      };
      setTodos([...todos, newTodo]);
      setInputValue('');
    }
  };

  // Âà™Èô§ÂæÖËæ¶‰∫ãÈ†Ö
  const handleDeleteTodo = (id) => {
    setTodos(todos.filter(todo => todo.id !== id));
  };

  // Êõ¥Êñ∞ÂæÖËæ¶‰∫ãÈ†ÖÁãÄÊÖã
  const handleToggleTodo = (id) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  // ÈñãÂßãÁ∑®ËºØ
  const handleStartEdit = (todo) => {
    setEditingId(todo.id);
    setEditValue(todo.text);
  };

  // ‰øùÂ≠òÁ∑®ËºØ
  const handleSaveEdit = (id) => {
    if (editValue.trim()) {
      setTodos(todos.map(todo =>
        todo.id === id ? { ...todo, text: editValue } : todo
      ));
      setEditingId(null);
      setEditValue('');
    }
  };

  // ÂèñÊ∂àÁ∑®ËºØ
  const handleCancelEdit = () => {
    setEditingId(null);
    setEditValue('');
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6 text-center">ÂæÖËæ¶‰∫ãÈ†ÖÂàóË°®</h1>
      <div className="flex gap-3 mb-6">
        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder="Ëº∏ÂÖ•Êñ∞ÁöÑÂæÖËæ¶‰∫ãÈ†Ö..."
          className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button 
          onClick={handleAddTodo}
          className="px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
        >
          Êñ∞Â¢û
        </button>
      </div>
      <ul className="space-y-3">
        {todos.map(todo => (
          <li 
            key={todo.id} 
            className="flex items-center p-4 bg-white rounded-lg shadow hover:shadow-md transition-shadow"
          >
            <input
              type="checkbox"
              checked={todo.completed}
              onChange={() => handleToggleTodo(todo.id)}
              className="w-5 h-5 mr-3 text-blue-500 rounded focus:ring-blue-500"
            />
            {editingId === todo.id ? (
              <div className="flex-1 flex gap-2">
                <input
                  type="text"
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  className="flex-1 px-3 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                  autoFocus
                />
                <button
                  onClick={() => handleSaveEdit(todo.id)}
                  className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                >
                  ‰øùÂ≠ò
                </button>
                <button
                  onClick={handleCancelEdit}
                  className="px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
                >
                  ÂèñÊ∂à
                </button>
              </div>
            ) : (
              <>
                <span className="text-2xl mr-2">{todo.emoji}</span>
                <span className={`flex-1 ${todo.completed ? 'line-through text-gray-500' : ''}`}>
                  {todo.text}
                </span>
                <div className="flex gap-2">
                  <button
                    onClick={() => handleStartEdit(todo)}
                    className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                  >
                    Á∑®ËºØ
                  </button>
                  <button
                    onClick={() => handleDeleteTodo(todo.id)}
                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                  >
                    Âà™Èô§
                  </button>
                </div>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}
